import * as XLSX from 'xlsx';
import { ExcelRowSchema, ExcelTableDTO } from '../schemas/excelTable.schema';

/**
 * Parses an Excel file buffer and returns an array of raw row objects.
 * @param buffer The buffer of the uploaded Excel file.
 * @returns The array of raw row objects extracted from the Excel file.
 */
export const parseExcelToRows = (buffer: Buffer) => {
  const workbook = XLSX.read(buffer, { type: 'buffer' });
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];
  return XLSX.utils.sheet_to_json(sheet);
};

/**
 * Maps a single raw Excel row to a validated ExcelTableDTO using Zod.
 *
 * @param {any} row - The raw row object from Excel, typically generated by XLSX.utils.sheet_to_json.
 * @throws {Error} Throws an error if the row does not pass Zod validation, including field-specific error details.
 * @returns {ExcelTableDTO} The validated and typed DTO representing the Excel row.
 */
export const mapRowToDTO = (row: any): ExcelTableDTO => {
  // Parse the raw row with Zod
  const result = ExcelRowSchema.safeParse({
    companyName: String(row['Empresa'] || ''),
    year: Number(row['Ano'] || ''),
    sector: String(row['Setor'] || ''),
    energyConsumption: Number(row['Consumo de Energia (MWh)'] || ''),
    carbonEmissions: Number(row['EmissÃµes de CO2 (toneladas)'] || ''),
  });

  if (!result.success) {
    throw new Error(`Invalid row: ${JSON.stringify(result.error.flatten().fieldErrors)}`);
  }

  return result.data;
};

export const mapRowsToDTOs = (rows: any[]): ExcelTableDTO[] => {
  return rows.map(mapRowToDTO);
};
